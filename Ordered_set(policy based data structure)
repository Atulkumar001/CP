add x

insert(x) for inserting element x in the set.

remove x

Use erase(x) for deleting element x from the set.

In this code, we use the GNU Policy-Based Data Structures library to implement the ordered set. 
The tree_order_statistics_node_update class provides the necessary functions for maintaining the order of the set and querying for the position of an element.
The order_of_key function returns the number of elements in the set that are strictly less than the given element,
while the find_by_order function returns an iterator to the element at the given position.

find x

Use find_by_order(x) for finding the iterator to the xth location. It takes O(logN) in place of the linear ùëÇ(ùëÅ)time which we would have encountered if we did a complete traversal of the set.

findpos x

Use order_of_key(x) to find the index of the element x, if x doesn‚Äôt exist it finds the position that the element would have in the set. It takes O(logN) in place of the linear 
O(N) time which we would have encountered if we did a complete traversal of the set. Time Complexity per test case: 
O(QlogN)


Code


#include <bits/stdc++.h>
using namespace std;

#define ll long long int
#define LD long double

const int N = 100010;

int inf = 1e9;
int mod = 1e9 + 7;

#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    ordered_set;
/*
    order_of_key (k)
    find_by_order(k)
*/

signed main() {
  // freopen("IN", "r", stdin);
  // freopen("OUT", "w", stdout);

  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int T;
  cin >> T;

  while (T--) {
    int Q;
    cin >> Q;

    ordered_set s;

    while (Q--) {
      string op;
      int x;
      cin >> op >> x;

      if (op == "add") {
        s.insert(x);
      } else if (op == "remove") {
        if (s.find(x) != s.end()) {
          s.erase(s.find(x));
        }
      } else if (op == "find") {
        if (x >= (int)s.size()) {
          cout << "-1\n";
        } else {
// printing element at xth position
          cout << *(s.find_by_order(x)) << "\n";
        }
      } else {
// for finding position of the key
        cout << s.order_of_key(x) << "\n";
      }
    }
  }
  return 0;
}
