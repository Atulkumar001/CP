class Solution {
public:
   int dp[3000];     
    int parent[3000]; 

    
    int rec(int i, vector<int>& nums) {
        if(dp[i] != -1) return dp[i]; 
        int ans = 1;                  
        parent[i] = -1;
        for (int j = 0; j < i; j++) { // Transition: check all j < i
            if(nums[i] % nums[j] == 0) {
                int candidate = 1 + rec(j, nums);
                if(candidate > ans) {
                    ans = candidate;
                    parent[i] = j;
                }
            }
        }
        return dp[i] = ans; 
    }
    
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        if(n == 0) return {};
        sort(nums.begin(), nums.end());
        memset(dp, -1, sizeof(dp));
        
        int best = 0, bestIdx = 0;
        for (int i = 0; i < n; i++) { 
            int cur = rec(i, nums);
            if(cur > best) {
                best = cur;
                bestIdx = i;
            }
        }
        
    
        vector<int> res;
        for (int i = bestIdx; i != -1; i = parent[i])
            res.push_back(nums[i]);
        reverse(res.begin(), res.end());
        return res;
    }


};
