struct node{
    node* child[26];
    bool wend;
    node(){
        wend = false;
        for(int i=0;i<26;i++){
            child[i] = nullptr;
        }
    }
};

class Trie {
public:
  node* root;
    Trie() {
        root = new node();
    }
    
    void insert(string word) {
        node* cur = root;
        for(char c:word){
            int idx = c-'a';
            if(cur->child[idx]==nullptr){
                cur->child[idx] = new node();
            }
            cur = cur->child[idx];
        }
        cur->wend = true;
    }
    
    bool search(string word) {
        node *cur =    root;
        for(char c:word){
            int idx = c-'a';
            if(cur->child[idx]==nullptr){
                return false;
            }
            cur = cur->child[idx];
        }
        return cur->wend;
    }
    
    bool startsWith(string prefix) {
         node *cur =  root;
        for(char c:prefix){
            int idx = c-'a';
            if(cur->child[idx]==nullptr){
                return false;
            }
            cur = cur->child[idx];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
