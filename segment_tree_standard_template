// jai shree ram
    // newbie forever
    // aaj se sirius koding eestart
    // das kalol ka package chahiye
    // jaI MATA DI
                                      
    #include <bits/stdc++.h>
                                         
    using namespace std;

// #include <ext/pb_ds/assoc_container.hpp>
// using namespace __gnu_pbds;
// typedef tree<int, null_type, less<int>, rb_tree_tag,
//              tree_order_statistics_node_update>
//     ordered_set;
                                         
    typedef long long ll;
    //#define int long long int
    typedef pair<int, int> pii;
    typedef pair<ll, ll> pll;
    typedef pair<string, string> pss;
    typedef vector<int> vi;
    typedef vector<vi> vvi;
    typedef vector<pii> vii;
    typedef vector<ll> vl;
    typedef vector<vl> vvl;
    #define all(a) a.begin(), a.end()
    #define int long long int
     
    const ll MOD = 1e9 + 7;
    const ll INF = 1e18;
                                       
     
     

        const int NN = 2e5+5;
        ll n,q;
        ll a[NN];
        ll t[4*NN];

        void build(ll idx, ll l, ll r){
            if(l==r){
                t[idx] = (a[l]%2==0);
                return;
            }
            ll mid = (l+r)/2;
            build(2*idx,l,mid);
            build(2*idx+1,mid+1,r);
            t[idx] = t[2*idx]+t[2*idx+1];

        }
        void update(ll idx, ll l , ll r, ll pos, ll val){
            if(pos<l || pos>r){
                return;
            }
            if(l==r){
                t[idx] = (val%2==0);
                return;
            }
            ll mid = (l+r)/2;
            update(2*idx, l, mid, pos, val);
            update(2*idx+1, mid+1,r,pos,val);
            t[idx] = t[2*idx]+t[2*idx+1];


        }
        ll query(ll idx, ll l, ll r, ll lq, ll rq){
            if(l>rq || lq>r){
                return 0;
            }
            if(lq<=l && r<=rq){
                return t[idx];
            }
            ll mid = (l+r)/2;
            return query(2*idx,l,mid,lq,rq) + query(2*idx+1, mid+1, r,lq,rq);
        }

           
        void sol() {
            cin>>n;
            for(ll i=0;i<n;i++){
                cin>>a[i];
            }
            build(1,0,n-1);
            cin>>q;
            while(q--){
                ll x;
                cin>>x;
                if(x==0){
                    ll pos,val;
                    cin>>pos>>val;
                    pos--;
                    update(1,0,n-1,pos,val);
                }
                else{
                    ll l,r;
                    cin>>l>>r;
                    l--;
                    r--;
                    ll ans = query(1,0,n-1,l,r);
                    if(x==1){
                        cout<<ans<<endl;
                    }
                    else{
                        cout<<(r-l+1)-ans<<"\n";
                    }
                }

            }
          

        }

                     
    int32_t main() {
     
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
       
        ll t=1;                                                                                                          
        //cin>>t;
      
       
        // always use INT64_MAX instead of INT_MAX
       
        
      for(ll case_num = 1; case_num <= t; case_num++){
        
        sol();
    }
    
        return 0;
    }
